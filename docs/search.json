{"Structs/Domain/Size.html#/s:11MyNameIsURL6DomainV4SizeO7tooLongyAESScAEmF":{"name":"tooLong(_:)","abstract":"<p>Error received when a given string domains too many characters to be used as a domain name.</p>","parent_name":"Size"},"Structs/Domain/Size.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"Size"},"Structs/Domain/Format.html#/s:11MyNameIsURL6DomainV6FormatO7invalidyAESScAEmF":{"name":"invalid(_:)","abstract":"<p>Error received when a given string contains characters which are disallowed in a domain name.</p>","parent_name":"Format"},"Structs/Domain/Format.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"Format"},"Structs/Domain/Format.html":{"name":"Format","abstract":"<p>Domain formatting error.</p>","parent_name":"Domain"},"Structs/Domain/Size.html":{"name":"Size","abstract":"<p>Domain size error.</p>","parent_name":"Domain"},"Structs/Domain.html#/s:11MyNameIsURL6DomainV4nameSSvp":{"name":"name","abstract":"<p>The validated domain name (as a <code>String</code>).</p>","parent_name":"Domain"},"Structs/Domain.html#/s:11MyNameIsURL6DomainV4nameACSS_tKcfc":{"name":"init(name:)","abstract":"<p>Creates a new <code>Domain</code> value which wraps a validated domain name.</p>","parent_name":"Domain"},"Structs/Domain.html#/s:11MyNameIsURL6DomainV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Defines whether two <code>Domains</code> are equal based on their <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Domain.html#/s:11MyNameIsURL6DomainV4nameSSvp\">name</a></code> properties.</p>","parent_name":"Domain"},"Structs/User.html#/s:11MyNameIsURL4UserV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>A value that matches a <code>URL</code> with a <code>user</code> property of <code>nil</code>.</p>","parent_name":"User"},"Structs/User.html#/s:11MyNameIsURL4UserVyACSScfc":{"name":"init(_:)","abstract":"<p>Wraps the given string to create a new <code>User</code> value. It matches <code>URL</code>s based on their <code>user</code> property.</p>","parent_name":"User"},"Structs/User.html#/s:11MyNameIsURL4UserV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>User</code> matches a given <code>URL</code>.</p>","parent_name":"User"},"Structs/Scheme/Size.html#/s:11MyNameIsURL6SchemeV4SizeO8tooSmallyA2EmF":{"name":"tooSmall","abstract":"<p>Error thrown when for a zero-length scheme.</p>","parent_name":"Size"},"Structs/Scheme/Size.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"Size"},"Structs/Scheme/Format.html#/s:11MyNameIsURL6SchemeV6FormatO16invalidCharacteryAESS_SbtcAEmF":{"name":"invalidCharacter(invalidScheme:first:)","abstract":"<p>Error thrown when a scheme contains an invalid character. <code>first</code> indicates whether the first character was invalid (as it has different rules).</p>","parent_name":"Format"},"Structs/Scheme/Format.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"Format"},"Structs/Scheme/Format.html":{"name":"Format","abstract":"<p>Scheme format errors.</p>","parent_name":"Scheme"},"Structs/Scheme/Size.html":{"name":"Size","abstract":"<p>Scheme size errors.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV4httpACvpZ":{"name":"http","abstract":"<p>Convienience for http scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV5httpsACvpZ":{"name":"https","abstract":"<p>Convienience for https scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV3telACvpZ":{"name":"tel","abstract":"<p>Convienience for tel scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV9telpromptACvpZ":{"name":"telprompt","abstract":"<p>Convienience for telPrompt scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV3smsACvpZ":{"name":"sms","abstract":"<p>Convienience for sms scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV6mailtoACvpZ":{"name":"mailto","abstract":"<p>Convienience for mailto scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV6webcalACvpZ":{"name":"webcal","abstract":"<p>Convienience for webcal scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV4fileACvpZ":{"name":"file","abstract":"<p>Convienience for file scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV3ftpACvpZ":{"name":"ftp","abstract":"<p>Convienience for ftp scheme.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV5valueSSvp":{"name":"value","abstract":"<p>A validated scheme, as per <a href=\"https://tools.ietf.org/html/rfc3986#section-3.1\">RFC 3986, §3.1</a>.</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeVyACSSKcfc":{"name":"init(_:)","abstract":"<p>Creates a <code>Scheme</code> value, which holds a validated URL scheme as per <a href=\"https://tools.ietf.org/html/rfc3986#section-3.1\">RFC 3986, §3.1</a> (or <code>throw</code>s trying).</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>Undocumented</p>","parent_name":"Scheme"},"Structs/Scheme.html#/s:11MyNameIsURL6SchemeV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>Scheme</code> matches a given <code>URL</code>.</p>","parent_name":"Scheme"},"Structs/Port.html#/s:11MyNameIsURL4PortV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>A value that matches a <code>URL</code> with a <code>port</code> property of <code>nil</code>.</p>","parent_name":"Port"},"Structs/Port.html#/s:11MyNameIsURL4PortVyACSicfc":{"name":"init(_:)","abstract":"<p>Wraps the given number to create a new <code>Port</code> value. It matches <code>URL</code>s based on their <code>port</code> property.</p>","parent_name":"Port"},"Structs/Port.html#/s:11MyNameIsURL4PortV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>Port</code> matches a given <code>URL</code>.</p>","parent_name":"Port"},"Structs/PathPrefix/PathComponent.html#/s:11MyNameIsURL10PathPrefixV0E9ComponentO4nameyAESScAEmF":{"name":"name(_:)","abstract":"<p>A path component that matches other path components by string comparison.</p>","parent_name":"PathComponent"},"Structs/PathPrefix/PathComponent.html#/s:11MyNameIsURL10PathPrefixV0E9ComponentO8wildcardyA2EmF":{"name":"wildcard","abstract":"<p>A path component that matches any non-nil path component.</p>","parent_name":"PathComponent"},"Structs/PathPrefix/PathComponent.html#/s:s26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc":{"name":"init(stringLiteral:)","parent_name":"PathComponent"},"Structs/PathPrefix.html#/s:11MyNameIsURL10PathPrefixVyACSayAC0E9ComponentOGcfc":{"name":"init(_:)","abstract":"<p>Wraps the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PathPrefix/PathComponent.html\">PathComponent</a></code>s to create a new <code>PathPrefix</code> value. It matches against prefixes of a <code>URL</code>’s <code>pathComponents</code> property.</p>","parent_name":"PathPrefix"},"Structs/PathPrefix.html#/s:11MyNameIsURL10PathPrefixV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>PathPrefix</code> matches a given <code>URL</code>.</p>","parent_name":"PathPrefix"},"Structs/PathPrefix/PathComponent.html":{"name":"PathComponent","abstract":"<p>Represents a path component for use in creating a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PathPrefix.html\">PathPrefix</a></code>. A path component can be either a <code>name</code> (which is matched for equality with the strings of a <code>URL</code>’s <code>pathComponents</code>) or a <code>wildcard</code> (which matches any non-nil value):</p>","parent_name":"PathPrefix"},"Structs/Path.html#/s:11MyNameIsURL4PathV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>A value that matches a <code>URL</code> whose <code>path</code> property is an empty string (<code>&quot;&quot;</code>).</p>","parent_name":"Path"},"Structs/Path.html#/s:11MyNameIsURL4PathVyACSScfc":{"name":"init(_:)","abstract":"<p>Wraps the given string to create a new <code>Path</code> value. It matches <code>URL</code>s based on their <code>path</code> property.</p>","parent_name":"Path"},"Structs/Path.html#/s:11MyNameIsURL4PathV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>Path</code> matches a given <code>URL</code>.</p>","parent_name":"Path"},"Structs/Password.html#/s:11MyNameIsURL8PasswordV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>A value that matches a <code>URL</code> with a <code>password</code> property of <code>nil</code>.</p>","parent_name":"Password"},"Structs/Password.html#/s:11MyNameIsURL8PasswordVyACSScfc":{"name":"init(_:)","abstract":"<p>Wraps the given string to create a new <code>Password</code> value. It matches <code>URL</code>s based on their <code>password</code> property.</p>","parent_name":"Password"},"Structs/Password.html#/s:11MyNameIsURL8PasswordV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>Password</code> matches a given <code>URL</code>.</p>","parent_name":"Password"},"Structs/Or.html#/s:11MyNameIsURL2OrVyAcA12URLMatchable_pd_tcfc":{"name":"init(_:)","abstract":"<p>Wraps given collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s creating a new <code>Or</code> value. This matches <code>URL</code>s by evaluating these wrapped matchables and logically OR-ing their results together.</p>","parent_name":"Or"},"Structs/Or.html#/s:11MyNameIsURL2OrVyACSayAA12URLMatchable_pGcfc":{"name":"init(_:)","abstract":"<p>Wraps given collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s creating a new <code>Or</code> value. This matches <code>URL</code>s by evaluating these wrapped matchables and logically OR-ing their results together.</p>","parent_name":"Or"},"Structs/Or.html#/s:11MyNameIsURL2OrV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether an <code>Or</code> matches a given <code>URL</code></p>","parent_name":"Or"},"Structs/Not.html#/s:11MyNameIsURL3NotVyAcA12URLMatchable_pcfc":{"name":"init(_:)","abstract":"<p>Creates a <code>Not</code> value that wraps the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>, negating it’s <code>matches</code> result.</p>","parent_name":"Not"},"Structs/Not.html#/s:11MyNameIsURL3NotV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>A predicate that determines whether <code>Not</code> matches a given <code>URL</code>.</p>","parent_name":"Not"},"Structs/HostSuffix.html#/s:11MyNameIsURL10HostSuffixVyACSaySSGcfc":{"name":"init(_:)","abstract":"<p>Wraps the given domains to create a new <code>HostSuffix</code> value. It matches against suffixes of <code>URL.host</code> split into domain names.</p>","parent_name":"HostSuffix"},"Structs/HostSuffix.html#/s:11MyNameIsURL10HostSuffixVyACSayAA6DomainVGcfc":{"name":"init(_:)","abstract":"<p>Wraps the given components to create a new <code>HostSuffix</code> value. It matches against suffixes of a <code>URL</code>’s <code>host</code> property.</p>","parent_name":"HostSuffix"},"Structs/HostSuffix.html#/s:11MyNameIsURL10HostSuffixV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>HostSuffix</code> matches a given <code>URL</code>.</p>","parent_name":"HostSuffix"},"Structs/Host.html#/s:11MyNameIsURL4HostV7missingAA12URLMatchable_pvpZ":{"name":"missing","abstract":"<p>A value that matches a <code>URL</code> with a <code>host</code> property of <code>nil</code>.</p>","parent_name":"Host"},"Structs/Host.html#/s:11MyNameIsURL4HostVyACSScfc":{"name":"init(_:)","abstract":"<p>Wraps the given string to create a new <code>Host</code> value. It matches <code>URL</code>s based on their <code>host</code> property.</p>","parent_name":"Host"},"Structs/Host.html#/s:11MyNameIsURL4HostV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether a <code>Host</code> matches a given <code>URL</code>.</p>","parent_name":"Host"},"Structs/And.html#/s:11MyNameIsURL3AndVyAcA12URLMatchable_pd_tcfc":{"name":"init(_:)","abstract":"<p>Wraps given collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s creating a new <code>And</code> value. This matches <code>URL</code>s by evaluating these wrapped matchables and logically AND-ing their results together.</p>","parent_name":"And"},"Structs/And.html#/s:11MyNameIsURL3AndVyACSayAA12URLMatchable_pGcfc":{"name":"init(_:)","abstract":"<p>Wraps given collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s creating a new <code>And</code> value. This matches <code>URL</code>s by evaluating these wrapped matchables and logically AND-ing their results together.</p>","parent_name":"And"},"Structs/And.html#/s:11MyNameIsURL3AndV7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>Predicate that determines whether an <code>And</code> matches a given <code>URL</code></p>","parent_name":"And"},"Structs/And.html":{"name":"And","abstract":"<p>Type that matches a <code>URL</code> based on evaluation of its wrapped <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s, logically AND’d together.</p>"},"Structs/Host.html":{"name":"Host","abstract":"<p>Type that matches a <code>URL</code> based on comparison with the <code>URL</code>’s <code>host</code> propery.</p>"},"Structs/HostSuffix.html":{"name":"HostSuffix","abstract":"<p>Type that matches a <code>URL</code> based on the suffix of the <code>URL</code>’s <code>host</code> propery.</p>"},"Structs/Not.html":{"name":"Not","abstract":"<p>A wrapper for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code> that matches a URL whenever its wrapped value does not.</p>"},"Structs/Or.html":{"name":"Or","abstract":"<p>Type that matchies a <code>URL</code> based on evaluation of its wrapped <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code>s, logically OR’d together.</p>"},"Structs/Password.html":{"name":"Password","abstract":"<p>Type that matches a <code>URL</code> based on comparison with the <code>URL</code>’s <code>password</code> propery.</p>"},"Structs/Path.html":{"name":"Path","abstract":"<p>Type that matches a <code>URL</code> based on comparison with either the <code>URL</code>’s <code>path</code> or <code>pathComponetns</code> propery, depending on the initializer used.</p>"},"Structs/PathPrefix.html":{"name":"PathPrefix","abstract":"<p>Type that matches a <code>URL</code> based on the prefix of the <code>URL</code>’s <code>pathComponents</code> property.</p>"},"Structs/Port.html":{"name":"Port","abstract":"<p>Type that matches a <code>URL</code> based on comparison with the <code>URL</code>’s <code>port</code> propery.</p>"},"Structs/Scheme.html":{"name":"Scheme","abstract":"<p>Type that wraps a validated URL scheme, as per <a href=\"https://tools.ietf.org/html/rfc3986#section-3.1\">RFC 3986, §3.1</a>.</p>"},"Structs/User.html":{"name":"User","abstract":"<p>Type that matches a <code>URL</code> based on comparison with the <code>URL</code>’s <code>user</code> propery.</p>"},"Structs/Domain.html":{"name":"Domain","abstract":"<p>Type that wraps a validated domain name (as per RFCs <a href=\"https://tools.ietf.org/html/rfc952\">952</a> and <a href=\"https://tools.ietf.org/html/rfc1123\">1123</a>)</p>"},"Protocols/URLMatchable.html#/s:11MyNameIsURL12URLMatchableP7matches3urlSb10Foundation0D0V_tF":{"name":"matches(url:)","abstract":"<p>A predicate that determines whether a conforming type matches the given <code>URL</code>.</p>","parent_name":"URLMatchable"},"Protocols/URLMatchable.html":{"name":"URLMatchable","abstract":"<p>Conforming types define a predicate capable of matching a given <code>URL</code> (or not).</p>"},"Functions.html#/s:11MyNameIsURL2teoiySbAA12URLMatchable_p_10Foundation0D0VtF":{"name":"~=(_:_:)","abstract":"<p>Overrides the <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Patterns.html#grammar_expression-pattern\">Pattern Match Operator</a> to allow a given <code>URL</code> to be matched by some <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/URLMatchable.html\">URLMatchable</a></code> in context of a <code>switch</code>.</p>"},"Extensions/URL.html#/s:10Foundation3URLV08MyNameIsB0E9replacing6schemeAcD6SchemeV_tF":{"name":"replacing(scheme:)","abstract":"<p>Undocumented</p>","parent_name":"URL"},"Extensions/URL.html":{"name":"URL"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}